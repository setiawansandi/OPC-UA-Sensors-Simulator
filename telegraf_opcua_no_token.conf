# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "1s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = "local"

  ## Override default hostname, if empty use os.Hostname()
  hostname = "SANDI"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true


[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["https://westeurope-1.azure.cloud2.influxdata.com"]

  ## Token for authentication.
  # token = "$INFLUX_TOKEN"
  token = "$INFLUX_TOKEN"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "Dev Team"

  ## Destination bucket to write into.
  bucket = "WirelessHart OPCUA"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false


# convert "PV" output from string to float
[[processors.converter]]
  [processors.converter.fields]
    float = ["PV"]


# Retrieve data from OPCUA devices
[[inputs.opcua]]
  ## Metric name (_Measurement)
  name = "Simulated Gateway"
  
  ## OPC UA Endpoint URL
  endpoint = "opc.tcp://localhost:4840/opcua/server/"
  
  ## Maximum time allowed to establish a connect to the endpoint.
  connect_timeout = "10s"
  
  ## Maximum time allowed for a request over the estabilished connection.
  request_timeout = "5s"
  
  ## Security policy, one of "None", "Basic128Rsa15", "Basic256",
  ## "Basic256Sha256", or "auto"
  security_policy = "None"
  
  ## Security mode, one of "None", "Sign", "SignAndEncrypt", or "auto"
  security_mode = "None"
  
  ## Path to cert.pem. Required when security mode or policy isn't "None".
  ## If cert path is not supplied, self-signed cert and key will be generated.
  # certificate = "/etc/telegraf/cert.pem"
  
  ## Path to private key.pem. Required when security mode or policy isn't "None".
  ## If key path is not supplied, self-signed cert and key will be generated.
  # private_key = "/etc/telegraf/key.pem"
  
  ## Authentication Method, one of "Certificate", "UserName", or "Anonymous".  To
  ## authenticate using a specific ID, select 'Certificate' or 'UserName'
  auth_method = "Anonymous"
  
  ## Username. Required for auth_method = "UserName"
  # username = ""
  
  ## Password. Required for auth_method = "UserName"
  # password = ""
  
  # Strip unneeded tags
  # tagexclude = ["id"] # didn't exlude id for sanity checking
  fielddrop = ["Quality"]

  ## Option to select the metric timestamp to use. Valid options are:
  ##     "gather" -- uses the time of receiving the data in telegraf
  ##     "server" -- uses the timestamp provided by the server
  ##     "source" -- uses the timestamp provided by the source
  # timestamp = "gather"
  
  ## Node ID configuration
  ## name              - field name to use in the output
  ## namespace         - OPC UA namespace of the node (integer value 0 thru 3)
  ## identifier_type   - OPC UA ID type (s=string, i=numeric, g=guid, b=opaque)
  ## identifier        - OPC UA ID (tag as shown in opcua browser)
  ## default_tags      - extra tags to be added to the output metric (optional)
  ## Example:
  ## {name="ProductUri", namespace="0", identifier_type="i", identifier="2262", tags=[["tag1","value1"],["tag2","value2]]}
  # nodes = [
  #   {field_name="", namespace="", identifier_type="", identifier=""},
  #   {field_name="", namespace="", identifier_type="", identifier=""},
  #]
  
  ## Node Group
  ## Sets defaults for OPC UA namespace and ID type so they aren't required in
  ## every node.  A group can also have a metric name that overrides the main
  ## plugin metric name.
  # Group configuration
  # name              - Group Metric name. Overrides the top level name. If unset, the top level name is used.
  # namespace         - Group default namespace. If a node in the group doesn't set its namespace, this is used.
  # identifier_type   - Group default identifier type. If a node in the group doesn't set its namespace, this is used.
  # default_tags      - default_tags = {tag1 = "val1"}
  
  ## Multiple node groups are allowed

# Group 0 -> Gateway 0
[[inputs.opcua.group]]
  name="Simulated Gateway 0"
  namespace="2"
  identifier_type="s"

  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw0.Temperature 0.PV" default_tags = {Sensor = "Temperature 0"}
  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw0.Temperature 1.PV" default_tags = {Sensor = "Temperature 1"}
  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw0.Temperature 2.PV" default_tags = {Sensor = "Temperature 2"}

# Group 1 -> Gateway 1
[[inputs.opcua.group]]
  name="Simulated Gateway 1"
  namespace="2"
  identifier_type="s"

  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw1.Temperature 0.PV" default_tags = {Sensor = "Temperature 0"}
  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw1.Temperature 1.PV" default_tags = {Sensor = "Temperature 1"}
  [[inputs.opcua.group.nodes]] name = "PV" identifier = "DataSources.sim-wihartgw1.Temperature 2.PV" default_tags = {Sensor = "Temperature 2"}

